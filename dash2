import streamlit as st
import pandas as pd
from datetime import datetime

st.set_page_config(page_title="Federico Miele - Análisis de rendimiento", layout="centered")

st.title("Federico Miele - Análisis de rendimiento")

# --- Sección: Fecha ---
fecha = st.date_input("📅 Fecha", datetime.today())

# --- Sección: Selección de portero ---
portero = st.radio("🧤 Selecciona el portero", ["Portero 1", "Portero 2", "Portero 3"], horizontal=True)

# --- Función: Botonera en cuadrícula ---
def grid_selector(label, opciones, key_prefix, cols=5, small=False):
    st.markdown(f"#### {label}")
    for i in range(0, len(opciones), cols):
        col_objs = st.columns(cols)
        for j, opt in enumerate(opciones[i:i+cols]):
            with col_objs[j]:
                estilo = "font-size: 12px; padding: 0.5em;" if small else "font-size: 16px; padding: 1em;"
                if st.button(str(opt), key=f"{key_prefix}_{opt}", use_container_width=True):
                    st.session_state[key_prefix] = opt
                st.markdown(f"<style>div.stButton > button{{{estilo}}}</style>", unsafe_allow_html=True)
    if key_prefix in st.session_state:
        st.success(f"{label} seleccionado: {st.session_state[key_prefix]}")

# --- Sección: Selección de tipo de evento ---
evento = st.radio("⚽ Tipo de evento", ["Atajada", "Gol recibido", "Pase"], horizontal=True)

# --- Opciones por tipo de evento ---
if evento == "Atajada":
    grid_selector("🎯 Zona de gol", [str(i) for i in range(1, 10)], "zona_gol", cols=3)
    
    zona_remate = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10',
                   '11', '12', '13', '14', '15', '16',
                   '17a', '17b', '17c',
                   '18a', '18b',
                   '19a', '19b', '19c',
                   '20']
    grid_selector("🎯 Zona de remate", zona_remate, "zona_remate", cols=5, small=True)

    tipo_intervencion = ["Reacción", "Anticipación", "Mano a Mano", "Otra"]
    grid_selector("🛡️ Tipo de intervención", tipo_intervencion, "tipo_intervencion", cols=2)

    resultado = ["Exitosa", "Rebote", "Bloqueo", "Desvío"]
    grid_selector("🎯 Resultado de la parada", resultado, "resultado_parada", cols=2)

    parte_cuerpo = ["Con las manos", "Con las piernas", "Otras partes del cuerpo"]
    grid_selector("💪 Parte del cuerpo", parte_cuerpo, "parte_cuerpo", cols=2)

    origen = ["Jugada", "Segunda jugada"]
    grid_selector("🧩 Origen", origen, "origen_ataj", cols=2)

elif evento == "Gol recibido":
    grid_selector("🎯 Zona de gol", [str(i) for i in range(1, 10)], "zona_gol", cols=3)
    
    zona_remate = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10',
                   '11', '12', '13', '14', '15', '16',
                   '17a', '17b', '17c',
                   '18a', '18b',
                   '19a', '19b', '19c',
                   '20']
    grid_selector("🎯 Zona de remate", zona_remate, "zona_remate", cols=5, small=True)

    tipo_gol = ["Jugada", "Segunda jugada", "Penal", "Tiro libre"]
    grid_selector("🥅 Tipo de gol", tipo_gol, "tipo_gol", cols=2)

    intervencion = ["Sí", "No"]
    grid_selector("🛑 Hubo intervención del portero", intervencion, "intervencion_gol", cols=2)

    intervalo = ["0-15", "16-30", "31-45", "46-60", "61-75", "76-90", "90+"]
    grid_selector("⏱️ Intervalo de tiempo", intervalo, "intervalo", cols=3)

    origen_error = ["Defensa", "Portero", "Otro"]
    grid_selector("🧩 Origen del error", origen_error, "origen_error", cols=2)

elif evento == "Pase":
    tipo_pase = ["Corto", "Largo", "Mano", "Despeje"]
    grid_selector("📤 Tipo de pase", tipo_pase, "tipo_pase", cols=2)

    exitoso = ["Sí", "No"]
    grid_selector("✅ Pase exitoso", exitoso, "pase_exitoso", cols=2)

# --- Guardar evento ---
if st.button("📋 Registrar evento"):
    datos = {
        "Fecha": fecha.strftime("%Y-%m-%d"),
        "Portero": portero,
        "Evento": evento,
    }

    for k in st.session_state:
        datos[k] = st.session_state[k]

    if "registros" not in st.session_state:
        st.session_state["registros"] = []

    st.session_state["registros"].append(datos)
    st.success("✅ Evento registrado con éxito")

# --- Mostrar tabla de registros ---
if "registros" in st.session_state and st.session_state["registros"]:
    st.markdown("### 📊 Registros acumulados")
    df = pd.DataFrame(st.session_state["registros"])
    st.dataframe(df, use_container_width=True)
